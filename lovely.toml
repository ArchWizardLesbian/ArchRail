[manifest]
version = "1.0.0"
dump_lua = true
priority = 12

# Increase highlight limit for jokers
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "{card_limit = self.GAME.starting_params.joker_slots, type = 'joker', highlight_limit = 1})"
position = "at"
payload = "{card_limit = self.GAME.starting_params.joker_slots, type = 'joker', highlight_limit = 100})"
match_indent = true

#copy unbound table
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for _, k in ipairs(reset_keys) do"
position = "before"
payload = "self.ability.unbound = center.unbound --for aneyh vampirica's unbound jokers"

match_indent = true

#sans
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if G.blind_select then "
position = "after"
payload = '''
    local _tag = e.UIBox:get_UIE_by_ID('tag_container')
    G.GAME.skip_tag = _tag
'''
match_indent = true
times = 2

#Paint badge text color
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
position = "before"
match_indent = true
payload = '''
local paint_key = ANVA.has_paint(card)
if paint_key and v == paint_key then
    badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v), SMODS.Stickers[paint_key].badge_text_colour)
else
'''
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = 'badges[#badges + 1] = create_badge(localize(v, "labels"), get_badge_colour(v))'
position = "after"
match_indent = true
payload = "end"

#Make 42 give chips from joker and consumable area
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
    if card.ability.set == 'Enhanced' then
        local enhancement = card:calculate_enhancement(context)
        if enhancement then
            ret.enhancement = enhancement
        end
    end
'''
position = "before"
match_indent = true
payload = '''
if card.config.card then
    if context.joker_main then
        ret.playing_card_in_weird_places = {chips = card.base.nominal, card = card}
        SMODS.calculate_context({scoring_42 = true, blueprint_card = context.blueprint_card, other_card = card}, post_trig)
    end
end
'''

#ban ranks with deck
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if self.GAME.starting_params.no_faces and SMODS.Ranks[v.value].face then keep = false end"
position = 'after'
match_indent = true
payload = '''
if self.GAME.starting_params.anva_banned_ranks and self.GAME.starting_params.anva_banned_ranks[SMODS.Ranks[v.value].key] then keep = false end'''

